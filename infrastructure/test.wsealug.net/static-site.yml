AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: Static Website hosted in CloudFront backed by S3
Parameters:
  HostedZone:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.
  Route53ZoneID:
    Type: String
    Description: The Route53 ID tied to the DNS Zone.
Mappings:
  Region2S3WebsiteSuffix:
    us-east-1:
      Suffix: .s3-website-us-east-1.amazonaws.com
    us-west-2:
      Suffix: .s3-website-us-west-2.amazonaws.com
Resources:
  S3BucketForWebsiteContent:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref HostedZone
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketForWebsiteContent
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: "Allow"
            Resource: !Sub ["arn:aws:s3:::${BucketName}/*", {BucketName: !Ref S3BucketForWebsiteContent}]
            Principal: 
              CanonicalUser: !GetAtt OriginIdentity.S3CanonicalUserId
  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for S3-backed website
        Aliases:
          - !Ref HostedZone
          - !Join [".", ['www', !Ref HostedZone]]
        Enabled: 'true'
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: only-origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Origins:
          - S3OriginConfig:
              OriginAccessIdentity: !Join ['/', ['origin-access-identity', 'cloudfront', !Ref OriginIdentity]]
            DomainName: !GetAtt S3BucketForWebsiteContent.DomainName
            Id: only-origin
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificate
          SslSupportMethod: sni-only
  OriginIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig: 
        Comment: "Hello"
  WebsiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref HostedZone
      SubjectAlternativeNames:
        - !Join ['.', ['www', !Ref HostedZone]]
  DNSRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref 'Route53ZoneID'
      RecordSets:
        - Type: A
          Name: !Ref HostedZone
          AliasTarget:
            DNSName: { "Fn::GetAtt": [ "WebsiteCDN" , "DomainName" ] }
            # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
            HostedZoneId: Z2FDTNDATAQYW2
        - Type: A
          Name: !Join ['.', ['www', !Ref HostedZone]]
          AliasTarget:
            DNSName: { "Fn::GetAtt": [ "WebsiteCDN" , "DomainName" ] }
            # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
            HostedZoneId: Z2FDTNDATAQYW2
Outputs:
  BucketName:
    Value: !Ref 'S3BucketForWebsiteContent'
    Description: Name of S3 bucket to hold website content

